# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is also recommended to add this template to the VCS ignore file.
.idea/

# VS Code
.vscode/
*.code-workspace

# Local configuration files
config.local.json
.env.local
.env.development.local
.env.test.local
.env.production.local

# MCP server logs and cache
*.log
logs/
mcp-server-*.log
claude_desktop_config.json.bak

# Health data files (if any test data)
test_data/
sample_health_data/

# Temporary files
*.tmp
*.temp
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Windows
*.lnk

# Editor backup files
*.bak
*.orig

# Custom project files
secret_keys.txt
api_keys.json
production_config.json

# FAQ backup files (optional - uncomment if you don't want to track FAQ changes)
# faq/*.bak
# faq/backup/

# ===========================================
# Node.js and Frontend Dashboard Additions
# ===========================================

# Dependencies
node_modules/
backend/node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Next.js build output
.next/
out/
.next/cache/

# TypeScript build info
*.tsbuildinfo

# Build outputs
build/
dist/

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory
coverage/
*.lcov
.nyc_output

# Dependency directories
jspm_packages/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache
.cache
.parcel-cache

# Nuxt.js build / generate output
.nuxt

# Gatsby files
# .cache/
# public

# Vite build output
dist-ssr
*.local

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/

# Package managers lock files (optional - uncomment if you want to ignore)
# package-lock.json
# yarn.lock
# pnpm-lock.yaml

# Database files
*.db
*.sqlite
*.sqlite3
database.db

# Prisma generated files (keep schema, ignore generated client)
dashboard/backend/node_modules/.prisma/
dashboard/backend/prisma/generated/

# Backend specific
dashboard/backend/dist/
dashboard/backend/logs/
dashboard/backend/.env
dashboard/backend/.env.local
dashboard/backend/.env.development.local
dashboard/backend/.env.test.local
dashboard/backend/.env.production.local

# Frontend specific  
dashboard/frontend/.next/
dashboard/frontend/out/
dashboard/frontend/.env
dashboard/frontend/.env.local
dashboard/frontend/.env.development.local
dashboard/frontend/.env.test.local
dashboard/frontend/.env.production.local

# Analytics and monitoring
.vercel
.netlify

# Docker
.dockerignore
docker-compose.override.yml

# IDE specific files
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Runtime and process files
*.pid
*.seed
*.pid.lock
*.lock
